#!/usr/bin/env python
import os
from os.path import join as pjoin, abspath, isdir, isfile, dirname
import sys
import subprocess
import re
from tempfile import  NamedTemporaryFile
import ConfigParser

config_filename = '.bzr-git.cfg'
config = ConfigParser.ConfigParser()
config.read(config_filename)

def add(name, location, filter=None):
    remotes = [r.strip() for r in config.sections()]
    if name in remotes:
        raise OSError("There is already a remote with that name")
    else:
        config.add_section(name)


    options = config.options(name)
    if location in options:
        raise OSError("There is alread a git-bzr branch with that name")
    else:
        config.set(name,'location',location)


    if not isdir(pjoin(location, ".bzr")):
        raise OSError("%(location)s is not a bazaar repository" %
                      locals())

    if not filter is None:
        config.set(name,'filter',filter)

    print "Bazaar branch %(name)s added. You can fetch it with " \
              "`git bzr fetch %(name)s`" % locals()
    with open(config_filename, 'wb') as configfile:
        config.write(configfile)


def fetch(remote,export_file=None):
    git_map, bzr_map = get_maps(remote)
    bzr_filter = get_filter(remote)
    location = get_location(remote) 
    if export_file is None:
        f = NamedTemporaryFile(delete=False)
        export_file = f.name
        f.close()

    

    if not isfile(git_map) and not isfile(bzr_map):
        print "There doesn't seem to be an existing refmap. "
        print "Doing an initial import"

        shcall('(bzr fast-export '
               '--plain '
               '--export-marks=%(bzr_map)s '
               '--git-branch=bzr/%(remote)s '
               '%(location)s)  | '
               'sed "s/reset\ refs\/tags\/version\ /reset\ refs\/tags\//" '
               ' > %(export_file)s' % locals() )
               
        cmd = ''
        cmd +='cat %(export_file)s | '
        if bzr_filter:
            cmd +=' bzr fast-import-filter %(bzr_filter)s | '

        cmd += 'git fast-import --export-marks=%(git_map)s'
        print cmd%locals()
        shcall( cmd%locals() )

    elif isfile(git_map) and isfile(bzr_map):
        print 'Updating remote', remote
        _do_colons(bzr_map, bzr_map, 'remove')
        old_rev = rev_parse('bzr/%s' % remote)
        shcall('(bzr fast-export '
               '--plain '
               '--import-marks=%(bzr_map)s '
               '--export-marks=%(bzr_map)s '
               '--git-branch=bzr/%(remote)s '
               '%(location)s) | '
               'sed "s/reset\ refs\/tags\/version\ /reset\ refs\/tags\//" '
               ' > %(export_file)s' % locals() )

        cmd = ''
        cmd +='cat %(export_file)s | '
        if bzr_filter:
            cmd +=' bzr fast-import-filter %(bzr_filter)s | '

        cmd += 'git fast-import --quiet '
        cmd += '  --export-marks=%(git_map)s'
        cmd += '  --import-marks=%(git_map)s'
        shcall( cmd%locals() )

        new_rev = rev_parse('bzr/%s' % remote)
        print "Changes since last update:"
        print shrun('git shortlog %s..%s' % (old_rev, new_rev))
    else:
        raise OSError("One of the mapfiles is missing! "
                      "Something went wrong!")
    

def _do_colons(in_fname, out_fname, action='add'):
    ''' Add or remove colons to / from front of commit numbers '''
    in_f = open(in_fname, 'rt')
    lines = []
    if action == 'add':
        regex = re.compile(r'^(\d+ )')
        substr = r':\1'
    elif action == 'remove':
        regex = re.compile(r'^:(\d+ )')
        substr = r'\1'
    for line in in_f:
        lines.append(regex.sub(substr, line))
    in_f.close()
    out_f = open(out_fname, 'wt')
    out_f.writelines(lines)
    out_f.close()
    

def push(remote):
    location = get_location(remote)
    lst = shrun('git rev-list --left-right HEAD...bzr/%s' % remote)
    if lst.startswith('>'):
        raise OSError("HEAD is not a strict child of %s, "
                      "cannot push. Merge first" % remote)
    if not lst.startswith('<'):
        raise OSError("Nothing to push. Commit something first")
    git_map, bzr_map = get_maps(remote)
    if not isfile(git_map) or not isfile(bzr_map):
        raise OSError("We do not have refmapping yet. "
                      "Then how can I push?")
    bzr_map_colons = bzr_map + '_colons'
    _do_colons(bzr_map, bzr_map, 'add')
    shcall('(git fast-export '
         '--import-marks=%(git_map)s '
         '--export-marks=%(git_map)s '
         'HEAD) | '
         '(cd %(location)s && '
         'bzr fast-import '
         '--import-marks=%(bzr_map)s '
         '--export-marks=%(bzr_map)s -)' % locals())


def shrun(cmd, ret_error=False, ret_code=False):
    proc = subprocess.Popen(cmd,
                 stdout=subprocess.PIPE,
                 stderr=subprocess.PIPE,
                 shell=True)
    (out, err) = proc.communicate()
    if not (ret_error or ret_code):
        return out
    ret = [out]
    if ret_error:
        ret.append(err)
    if ret_code:
        ret.append(proc.returncode)
    return ret


def shcall(cmd):
    return subprocess.check_call(cmd, shell=True)


def get_maps(remote):
    git_map = '.%s-git-map' % remote
    bzr_map = '.%s-bzr-map' % remote
    return git_map, bzr_map


def get_location(remote):
    out = config.get(remote,'location')
    if out == "":
        raise OSError("Cannot find bazaar remote with name `%(s`."
                      % remote)
    print out
    return out

def get_filter(remote):
    return config.get(remote,'filter')
    

def get_git_dir():
    return rev_parse('--git-dir')


def rev_parse(arg):
    print 'git rev-parse %s' % arg
    return shrun('git rev-parse %s' % arg).strip()


def to_git_root():
    out, code = shrun('git rev-parse', ret_code=True)
    if code != 0:
        raise OSError("Must be inside a git repository to work")
    # change to root of git repository
    up = rev_parse('--show-cdup')
    if up != '':
        os.chdir(up)
    

def parse_args(argv, cmds):
    program = argv.pop(0)
    print "argv",argv
    cmd_names = cmds.keys()
    usage = 'Usage: %s {%s}' % (program, ', '.join(cmd_names))
    if len(argv) == 0:
        print usage
        sys.exit()
    cmd = argv.pop(0)
    if cmd not in cmd_names:
        print usage
        sys.exit()
    func, req_args = cmds[cmd]
    if len(argv) != len(req_args):
        print 'Usage: %s %s %s ' % (program,
                                    cmd,
                                    ' '.join(req_args))
        sys.exit()
    return func, argv


def main():
    cmds = {'add': (add, ('name', 'location', 'filter')),
            'fetch': (fetch, ('branchname','export_file')),
            'push': (push, ('branchname',))}
    func, args = parse_args(sys.argv, cmds)

    to_git_root()
    func(*args)


if __name__ == '__main__':
    main()
